{"ast":null,"code":"var _jsxFileName = \"/Users/giorgio/WebstormProjects/Express-React/client/src/AppMainContent.js\";\nimport React from \"react\";\nexport default class AppMainContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: \"login\",\n      user: \"\",\n      items: [],\n      orders: new Array(100),\n      completeOrders: new Array(100),\n      orderByUser: new Array(100)\n    };\n    this.state.orders.fill(0);\n    this.sendOrder = this.sendOrder.bind(this);\n    this.login = this.login.bind(this);\n    this.setUserName = this.setUserName.bind(this);\n    this.tryLogin = this.tryLogin.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(ServerIP + \"menu\").then(res => res.json()).then(res => this.setState({\n      items: res\n    })); //console.log(JSON.stringify(this.state.items));\n  }\n\n  updateOrder(itemCode, sign) {\n    let ordersUpdate = this.state.orders;\n    if (ordersUpdate[itemCode] + sign >= 0) ordersUpdate[itemCode] = ordersUpdate[itemCode] + sign;\n    this.setState({\n      orders: ordersUpdate\n    });\n  }\n\n  sendOrder() {\n    let order = {\n      user: this.state.user,\n      items: this.state.orders\n    };\n    fetch(ServerIP + \"order\", {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(order)\n    }).then(res => res.json()).then(res => {\n      this.setState({\n        completeOrders: res.complete,\n        orderByUser: res.byUser\n      });\n      console.log(res);\n    });\n  }\n\n  setUserName(e) {\n    this.setState({\n      user: e.target.value\n    });\n  }\n\n  setTable(e) {\n    this.setState({\n      table: e.target.value\n    });\n  }\n\n  setRestaurant(e) {\n    this.setState({\n      restaurant: e.target.value\n    });\n  }\n\n  tryLogin(e) {\n    if (e.keyCode === 13) {\n      this.login();\n    }\n  }\n\n  login() {\n    //TODO: Fetch server and retrieve previous order of the user if any are present SOLVED\n    fetch(ServerIP + \"order/userMenu/\", {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: this.state.user\n      })\n    }).then(res => res.json()).then(res => this.setState({\n      orders: res\n    }));\n    this.setState({\n      mode: \"menu\"\n    });\n  }\n\n  render() {\n    let myOrder = this.state.orders.map((item, idx) => {\n      return [item, idx];\n    }).filter(item => {\n      return item[0] > 0;\n    });\n    let completeOrder = this.state.completeOrders.map((item, idx) => {\n      return [item, idx];\n    }).filter(item => {\n      return item[0] > 0;\n    });\n\n    if (this.state.mode === \"menu\") {\n      return React.createElement(\"div\", {\n        className: \"AppMainContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"Send\",\n        onClick: this.sendOrder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"OK\"), this.state.items.map((item, idx) => {\n        return React.createElement(MenuItem, {\n          name: item.name,\n          ingredients: item.ingredients.concat(),\n          count: item.count,\n          img: item.img,\n          code: item.code,\n          order: this.updateOrder.bind(this),\n          selected: this.state.orders[idx + 1],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        });\n      }), React.createElement(OrderBar, {\n        selectedItems: myOrder,\n        menu: this.state.items,\n        complete: completeOrder,\n        byUser: this.state.orderByUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }));\n    } else if (this.state.mode === \"login\") {\n      return React.createElement(\"div\", {\n        className: \"Login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"restaurant\",\n        type: \"text\",\n        onChange: this.setRestaurant,\n        onKeyDown: this.tryLogin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        id: \"table\",\n        type: \"text\",\n        onChange: this.setTable,\n        onKeyDown: this.tryLogin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        id: \"name\",\n        type: \"text\",\n        onChange: this.setUserName,\n        onKeyDown: this.tryLogin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        id: \"loginButton\",\n        onClick: this.login,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"OK\"));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/giorgio/WebstormProjects/Express-React/client/src/AppMainContent.js"],"names":["React","AppMainContent","Component","constructor","props","state","mode","user","items","orders","Array","completeOrders","orderByUser","fill","sendOrder","bind","login","setUserName","tryLogin","componentDidMount","fetch","ServerIP","then","res","json","setState","updateOrder","itemCode","sign","ordersUpdate","order","method","headers","body","JSON","stringify","complete","byUser","console","log","e","target","value","setTable","table","setRestaurant","restaurant","keyCode","render","myOrder","map","item","idx","filter","completeOrder","name","ingredients","concat","count","img","code"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nexport default class AppMainContent extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            mode: \"login\",\n            user: \"\",\n            items: [],\n            orders: new Array(100),\n            completeOrders: new Array(100),\n            orderByUser: new Array(100),\n        };\n        this.state.orders.fill(0);\n        this.sendOrder = this.sendOrder.bind(this);\n        this.login = this.login.bind(this);\n        this.setUserName = this.setUserName.bind(this);\n        this.tryLogin = this.tryLogin.bind(this);\n    }\n\n    componentDidMount() {\n        fetch(ServerIP+\"menu\")\n            .then(res => res.json())\n            .then(res => this.setState({ items: res }));\n        //console.log(JSON.stringify(this.state.items));\n    }\n\n    updateOrder(itemCode, sign){\n        let ordersUpdate = this.state.orders;\n        if(ordersUpdate[itemCode] + sign>=0)\n            ordersUpdate[itemCode] = ordersUpdate[itemCode] + sign;\n        this.setState({\n            orders: ordersUpdate,\n        });\n    }\n\n    sendOrder(){\n        let order = {\n            user: this.state.user,\n            items: this.state.orders,\n        };\n\n        fetch(ServerIP+\"order\", {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(order)\n        }).then(res => res.json()).then(res => {\n            this.setState({\n                completeOrders: res.complete,\n                orderByUser: res.byUser,\n            });\n            console.log(res);\n        });\n\n    }\n\n    setUserName(e){\n        this.setState({\n            user: e.target.value,\n        })\n    }\n\n    setTable(e){\n        this.setState({\n            table: e.target.value,\n        })\n    }\n\n    setRestaurant(e){\n        this.setState({\n            restaurant: e.target.value,\n        })\n    }\n\n\n    tryLogin(e){\n        if(e.keyCode === 13){\n            this.login()\n        }\n    }\n\n    login(){\n        //TODO: Fetch server and retrieve previous order of the user if any are present SOLVED\n        fetch(ServerIP+\"order/userMenu/\", {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({user:this.state.user}),\n        })\n            .then(res => res.json())\n            .then(res => this.setState({ orders: res }));\n        this.setState({\n            mode: \"menu\"\n        })\n    }\n\n    render(){\n        let myOrder = this.state.orders.map((item, idx) => {\n            return [item, idx];\n        }).filter((item) => {\n            return item[0]>0;\n        });\n\n        let completeOrder = this.state.completeOrders.map((item, idx) => {\n            return [item, idx];\n        }).filter((item) => {\n            return item[0]>0;\n        });\n        if(this.state.mode === \"menu\"){\n            return (\n                <div className=\"AppMainContent\">\n                    <button id=\"Send\" onClick={this.sendOrder}>OK</button>\n                    {/*TODO: Add sections of the menu*/}\n                    {this.state.items.map((item, idx) => {\n                        return <MenuItem name={item.name} ingredients={item.ingredients.concat()} count={item.count} img={item.img} code={item.code} order={this.updateOrder.bind(this)} selected={this.state.orders[idx+1]}/>\n                    })}\n                    <OrderBar selectedItems={myOrder} menu={this.state.items} complete={completeOrder} byUser={this.state.orderByUser}/>\n                    {/*<MyOrder selectedItems={myOrder} menu={this.state.items}/>*/}\n                </div>\n            )\n        }else if(this.state.mode === \"login\"){\n            return (\n                <div className=\"Login\">\n                    <input id=\"restaurant\" type=\"text\" onChange={this.setRestaurant} onKeyDown={this.tryLogin}/>\n                    <input id=\"table\" type=\"text\" onChange={this.setTable} onKeyDown={this.tryLogin}/>\n                    <input id=\"name\" type=\"text\" onChange={this.setUserName} onKeyDown={this.tryLogin}/>\n                    <button id=\"loginButton\" onClick={this.login}>OK</button>\n                </div>\n\n            )\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}